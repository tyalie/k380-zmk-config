#include "keymap_german.h"

#define DEFAULT 0
#define FNL     1
#define LOW     2
#define NUM     3
#define UML     4

/*
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans              &trans
&trans    &trans    &trans    &trans                  &trans                              &trans    &trans    &trans    &trans    &trans    &trans
*/


/ {
  behaviors {
    quote: shift_quotes {
      compatible = "zmk,behavior-mod-morph";
      label = "SHIFT_QUOTES";
      #binding-cells = <0>;
      bindings = <&kp DE_SQT>, <&kp DE_DQT>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    semicol: semi_colon {
      compatible = "zmk,behavior-mod-morph";
      label = "SEMI_COLON";
      #binding-cells = <0>;
      bindings = <&kp DE_SEMI>, <&kp DE_COLN>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    
    clabk: comma_labk {
      compatible = "zmk,behavior-mod-morph";
      label = "COMMA_LEFT_ABK";
      #binding-cells = <0>;
      bindings = <&kp COMMA>, <&mt MAC_LABK DE_LABK>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    drabk: dot_rabk {
      compatible = "zmk,behavior-mod-morph";
      label = "DOT_RIGHT_ABK";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&mt MAC_RABK DE_RABK>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    ht_compcar: mac_compatible_carret_hold {
      compatible = "zmk,behavior-hold-tap";
      label = "MAC_COMPATIBLE_CARRET_HOLD";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      bindings = <&mac_caret>, <&caret>;
    };
  };

  macros {
    ZMK_MACRO(caret, tap-ms = <1>; bindings = <&kp DE_CIRC &kp SPACE>;)
    ZMK_MACRO(mac_caret, tap-ms = <1>; bindings = <&kp MAC_CIRC &kp SPACE>;)
    ZMK_MACRO(grave, tap-ms = <1>; bindings = <&kp DE_GRV &kp SPACE>;)
  };
  
  keymap0: keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
&kp CAPS    &kp C_BRI_DN &kp C_BRI_UP &none &none &none &kp PSCRN &none &kp C_PREV &kp C_PP &kp C_NEXT &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &kp C_PWR
&kp DE_CIRC &kp N1   &kp N2   &kp N3    &kp N4  &kp N5  &kp N6   &kp N7  &kp N8  &kp N9    &kp N0     &kp DE_MINS &kp DE_EQL &none
&kp TAB     &kp Q    &kp W    &kp E     &kp R   &kp T   &kp DE_Y &kp U   &kp I   &kp  O    &kp P      &mo NUM     &mo NUM    &none
&kp ESC     &kp A    &kp S    &kp D     &kp F   &kp G   &kp H    &kp J   &kp K   &kp  L    &semicol   &kp RET     &kp BSPC
&kp LSHFT   &mo UML  &kp DE_Z &kp X     &kp C   &kp V   &kp B    &kp N   &kp M   &clabk    &drabk     &kp LALT           &kp RSHFT
&kp LCTRL   &mo FNL  &kp LGUI &mo LOW                &kp SPACE                   &mo LOW   &kp RCTRL  &kp LEFT    &kp UP &kp DOWN   &kp RIGHT
        >;
    };

    function_layer {
      bindings = <
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &out OUT_TOG  &none  &none  &none  &none  &none  &none  &none  &none  &none  &bootloader
&none      &none        &none        &none        &none         &none  &none  &none  &none  &none  &none  &none  &none  &none
&none      &none        &none        &none        &none         &none  &none  &none  &none  &none  &none  &none  &none  &none
&none      &none        &none        &none        &none         &none  &none  &none  &none  &none  &none  &none  &none
&none      &none        &none        &none        &none         &none  &none  &none  &none  &none  &none  &none         &none
&none      &mo FNL      &none        &none               &none                              &none  &none  &none  &none  &none  &none
        >;
    };

    lower_layer {
      bindings = <
&trans   &trans      &trans      &trans       &trans       &trans       &trans      &trans       &trans       &trans       &trans      &trans       &trans    &kp INS  &kp DEL
&trans   &kp F1      &kp F2      &kp F3       &kp F4       &kp F5       &kp F6      &kp F7       &kp F8       &kp F9       &kp F10     &kp F11      &kp F12   &trans
&trans   &kp DE_QUES &kp DE_BSLH &mt MAC_PIPE DE_PIPE  &kp DE_FSLH  &kp DE_EXCL  &kp DE_AT   &kp DE_PLUS  &kp DE_MINS  &kp DE_STAR  &kp DE_FSLH &kp DE_AMPS  &trans    &trans
&trans   &kp DE_EQL  &kp DE_LBKT &kp DE_LBRC  &kp DE_LPAR  &kp DE_HASH  &kp LEFT    &kp DOWN     &kp UP       &kp RIGHT    &ht_compcar 0 0  &trans       &trans
&trans   &trans      &kp DE_UNDS &kp DE_RBKT  &kp DE_RBRC  &kp DE_RPAR  &kp DE_PERC &kp DE_DLR   &kp DE_TILD  &grave       &quote      &trans                 &trans
&trans   &trans      &trans      &trans                   &trans                                 &trans       &trans       &trans      &trans       &trans    &trans
        >;
    };

    number_layer {
      bindings = <
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &none     &kp N7    &kp N8    &kp N9    &kp COMMA &none     &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &none     &kp N4    &kp N5    &kp N6    &kp N0    &none     &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans    &kp N1    &kp N2    &kp N3    &kp DOT   &none     &trans    &trans    &trans    &trans    &trans              &trans
&trans    &trans    &trans    &trans                  &trans                              &trans    &trans    &trans    &trans    &trans    &trans
        >;
    };

    umlaut_layer {
      bindings = <
&trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans      &trans    &trans      &trans    &trans    &trans    &trans    &trans
&trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans      &trans    &trans      &trans    &trans    &trans    &trans
&trans    &trans      &trans    &trans    &trans    &trans    &trans    &kp DE_UDIA &trans    &kp DE_ODIA &trans    &trans    &trans    &trans
&trans    &kp DE_ADIA &kp DE_SS &trans    &trans    &trans    &trans    &trans      &trans    &trans      &trans    &trans    &trans
&trans    &trans      &trans    &trans    &trans    &trans    &trans    &trans      &trans    &trans      &trans    &trans              &trans
&trans    &trans      &trans    &trans                  &trans                                &trans      &trans    &trans    &trans    &trans    &trans
      >;
    };
  };
};
